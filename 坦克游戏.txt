package Tank;

import java.awt.*;

public class Bullet {
    private Image img = Toolkit.getDefaultToolkit().getImage("src/images/emU.gif");
    private int x = 100;
    private int y = 100;
    private int speed;
    //0 上 1下 2左 3右
    private int direction;

    public Bullet(int x, int y, int speed, int direction) {
        super();
        this.x = x;
        this.y = y;
        this.speed = speed;
        this.direction = direction;
    }

    public void paint(Graphics g) {
        //子弹位置要微调
        g.drawImage(img, x+23, y+23, null);// 2,靠自动重绘（用一个线程来重绘）
        move();
    }

    public void move(){
        switch (this.direction) {//
            case 0:
                y -= speed;
                break;
            case 1:
                y += speed;
                break;
            case 2:
                x -= speed;
                break;
            case 3:
                x += speed;
                break;
            default:
                break;
        }
    }
}
package Tank;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.Random;

import static Tank.GameWindow.addBullet;

public class EnemyTank extends Tank {
    private boolean live=true;
    //记录上一个位置
    private int oldx;
    private int oldy;

    private Random random=new Random();
    //0 上 1下 2左 3右
    private int direction;

    private Image[] images = new Image[] {
            Toolkit.getDefaultToolkit().getImage("src/images/tankU.gif"),
            Toolkit.getDefaultToolkit().getImage("src/images/tankD.gif"),
            Toolkit.getDefaultToolkit().getImage("src/images/tankL.gif"),
            Toolkit.getDefaultToolkit().getImage("src/images/tankR.gif")};

    public void fire(){
        addBullet(new Bullet(x, y, speed*2,direction));
    }

    public void paint(Graphics g) {
        g.drawImage(images[direction], x, y, null);// 2,靠自动重绘（用一个线程来重绘）
        move(null);
    }

    public void move(KeyEvent e) {
        oldx=x;
        oldy=y;

        //10%的情况下改变方向
        double d=random.nextDouble();
        if (d>0.95) {
            direction=random.nextInt(4);//方向随机
        }
        if(d>0.99){
            fire();
        }
        switch (direction) {//
            case 0:
                y -= speed;
                break;
            case 1:
                y += speed;
                break;
            case 2:
                x -= speed;
                break;
            case 3:
                x += speed;
                break;
            default:
        }

        if (x<=0||x>800-50||y<30||y>600-50) {
            //超出边界将位置退回到上一个位置
            x=oldx;
            y=oldy;
        }
    }

    @Override
    public void move() {
        // TODO Auto-generated method stub

    }
}
package Tank;

import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class GameWindow extends Frame {
    EnemyTank enemyTank = new EnemyTank();
    MyTank myTank=new MyTank();
    Tank[]tanks=new Tank[]{enemyTank,myTank,new EnemyTank(),new EnemyTank()};
    static Bullet [] bullets=new Bullet[100];
    static int countBullets=0;

    public static void main(String[] args) {
        GameWindow myWindow=new GameWindow();
        myWindow.startFrame();
    }

    public void startFrame(){
        this.setSize(800, 600);//设置游戏窗体的宽高：800*600
        this.setVisible(true); //让窗体可见（默认是不可见）
        new PaintThread().start();//启动画图（动画）线程
        this.addKeyListener(new KeyboardListener());//加入监听器，程序可以监听键盘事件，即可实现键盘控制我方坦克
    }

    /**
     * 画图的方法
     * @param g 相当于画笔
     */
    @Override
    public void paint(Graphics g) {
        //将坦克在窗体上画出来
//		tank1.paint(g);
//		tank2.paint(g);
//		enemyTank.paint(g);
//		myTank.paint(g);
        for (int i=0;i<tanks.length;i++) {
            tanks[i].paint(g);
        }
        //画出子弹
        for (int i=0;i<bullets.length;i++){
            if(bullets[i]!=null){
                bullets[i].paint(g);
            }
        }
    }

    //绘制动画时需开启的线程（具体内容参考第十单元:多线程）
    class PaintThread extends Thread{
        @Override
        public void run() {
            while (true) {
                repaint();//更新（重绘）画面
                try {
                    Thread.sleep(40);//每隔40毫秒更新（重绘）一次画面
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    //加入监听器，程序可以监听键盘事件，即可实现键盘控制我方坦克
    class KeyboardListener extends KeyAdapter {
        public void keyPressed(KeyEvent e) {
            myTank.move(e);
        }
    }

    public static void addBullet(Bullet b){
        bullets[countBullets]=b;
        countBullets++;
        if(countBullets>=99){
            countBullets=0;
        }
    }
}
package Tank;

import java.awt.*;
import java.awt.event.KeyEvent;

public class MyTank extends Tank {
    // 记录上一个位置
    private int oldx;
    private int oldy;
    // 0 上 1下 2左 3右
    private int direction;

    private Image[] images = new Image[] {
            Toolkit.getDefaultToolkit().getImage("src/images/tankU.gif"),
            Toolkit.getDefaultToolkit().getImage("src/images/tankD.gif"),
            Toolkit.getDefaultToolkit().getImage("src/images/tankL.gif"),
            Toolkit.getDefaultToolkit().getImage("src/images/tankR.gif") };

    public void fire() {
        GameWindow.addBullet(new Bullet(x, y, speed*2,direction));
    }

    public void paint(Graphics g) {
        g.drawImage(images[direction], x, y, null);// 2,靠自动重绘（用一个线程来重绘）
//		move(null);
    }

    public void move(KeyEvent e) {

        oldx = x;
        oldy = y;

        switch (e.getKeyCode()) {//
            case KeyEvent.VK_UP:
                direction = 0;
                y -= speed;
                break;
            case KeyEvent.VK_DOWN:
                direction = 1;
                y += speed;
                break;
            case KeyEvent.VK_LEFT:
                direction = 2;
                x -= speed;
                break;
            case KeyEvent.VK_RIGHT:
                direction = 3;
                x += speed;
                break;
            case KeyEvent.VK_F:
//			GameWindow.addBullet(new Bullet(x, y, speed*2,direction));
                fire();
            default:
                break;
        }

        if (x <= 0 || x > 800 - 50 || y < 30 || y > 600 - 50) {
            // 超出边界将位置退回到上一个位置
            x = oldx;
            y = oldy;
        }
    }

    @Override
    public void move() {
        // TODO Auto-generated method stub

    }
}
package Tank;

import java.awt.*;
import java.awt.event.KeyEvent;

public abstract class Tank {
    //坦克的位置
    protected int x = 100;
    protected int y = 100;
    //坦克的大小（高宽）
    private int w = 50;
    private int h = 50;
    //坦克的速度
    protected int speed = 10;
    //坦克的外形图片
    private Image image = Toolkit.getDefaultToolkit().getImage(
            "src/images/tankU.gif");

    public Tank(int x, int y, int w, int h, int speed, Image image) {
        super();
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
        this.speed = speed;
        this.image = image;
    }

    public Tank(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public Tank() {
    }

    //坦克移动的方法
    public abstract void move(KeyEvent e);
    public abstract void move();
    //将坦克在窗体上画出来
    public abstract void paint(Graphics g);

    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }
}



